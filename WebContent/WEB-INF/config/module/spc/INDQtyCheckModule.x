  #
   # Title:盘点管理
   #
   # Description:盘点管理
   #
   # Copyright: JavaHis (c) 2009
   #
   # @author zhangy 2009/06/10
Module.item=query;insert;queryFrozenDate;update;updateQtyCheck;updateUnLock;getQueryQtyCheckMaster;getQueryQtyCheckDetail
   
//根据条件查询盘点记录
query.Type=TSQL
query.SQL=SELECT ORG_CODE, FROZEN_DATE, ORDER_CODE, BATCH_SEQ, BATCH_NO, VALID_DATE, &
       		 CHECKREASON_CODE, CHECK_TYPE, DOSAGE_UNIT, STOCK_UNIT, STOCK_PRICE, &
       		 TRADE_PRICE, RETAIL_PRICE, STOCK_QTY, MODI_QTY, ACTUAL_CHECKQTY_DATE, &
       		 ACTUAL_CHECK_QTY, ACTUAL_CHECKQTY_USER, PRINT_PAGE, UNFREEZE_DATE, &
       		 UNFREEZE_USER, OPT_USER, OPT_DATE, OPT_TERM &
       	    FROM IND_QTYCHECK &
       	    ORDER BY ORDER_CODE
query.ITEM=ORG_CODE;FROZEN_DATE;ORDER_CODE;BATCH_SEQ
query.ORG_CODE=ORG_CODE=<ORG_CODE>
query.FROZEN_DATE=FROZEN_DATE=<FROZEN_DATE>
query.ORDER_CODE=ORDER_CODE=<ORDER_CODE>
query.BATCH_SEQ=BATCH_SEQ=<BATCH_SEQ>
query.Debug=N


//查询冻结时间
queryFrozenDate.Type=TSQL
queryFrozenDate.SQL=SELECT DISTINCT FROZEN_DATE, UNFREEZE_DATE &
       	    	    FROM IND_QTYCHECK WHERE ORG_CODE=<ORG_CODE> ORDER BY FROZEN_DATE DESC
queryFrozenDate.Debug=N


//新增盘点
insert.Type=TSQL
insert.SQL=INSERT INTO IND_QTYCHECK( &
		ORG_CODE, FROZEN_DATE, ORDER_CODE, BATCH_SEQ, BATCH_NO, &
		VALID_DATE, CHECKREASON_CODE, CHECK_TYPE, DOSAGE_UNIT, STOCK_UNIT, &
		STOCK_PRICE, TRADE_PRICE, RETAIL_PRICE, STOCK_QTY, MODI_QTY, &
		ACTUAL_CHECK_QTY, OPT_USER, OPT_DATE, OPT_TERM,VERIFYIN_PRICE) &
	   VALUES( &
	        <ORG_CODE>, <FROZEN_DATE>, <ORDER_CODE>, <BATCH_SEQ>, <BATCH_NO>, &
		<VALID_DATE>, <CHECKREASON_CODE>, <CHECK_TYPE>, <DOSAGE_UNIT>, <STOCK_UNIT>, &
		<STOCK_PRICE>, <TRADE_PRICE>, <RETAIL_PRICE>, <STOCK_QTY>, <MODI_QTY>, &
		<ACTUAL_CHECK_QTY>, <OPT_USER>, <OPT_DATE>, <OPT_TERM>,<VERIFYIN_PRICE>)
insert.Debug=N


//更新盘点实际数量和调整量
update.Type=TSQL
update.SQL=UPDATE IND_QTYCHECK SET ACTUAL_CHECK_QTY=0 , &
				   MODI_QTY=0-STOCK_QTY , &
				   ACTUAL_CHECKQTY_USER=<ACTUAL_CHECKQTY_USER> , &
				   ACTUAL_CHECKQTY_DATE=<ACTUAL_CHECKQTY_DATE> , &
				   OPT_USER=<OPT_USER> , &
				   OPT_DATE=<OPT_DATE> , &
				   OPT_TERM=<OPT_TERM> &
			     WHERE ORG_CODE=<ORG_CODE> & 
			       AND FROZEN_DATE=<FROZEN_DATE>
update.Debug=N


//保存盘点数据
updateQtyCheck.Type=TSQL
updateQtyCheck.SQL=UPDATE IND_QTYCHECK SET &
				   MODI_QTY=<QTY>-STOCK_QTY , &
				   ACTUAL_CHECK_QTY=<QTY> , &                        
				   ACTUAL_CHECKQTY_USER=<ACTUAL_CHECKQTY_USER> , &
				   ACTUAL_CHECKQTY_DATE=<ACTUAL_CHECKQTY_DATE> , &
				   OPT_USER=<OPT_USER> , &
				   OPT_DATE=<OPT_DATE> , &
				   OPT_TERM=<OPT_TERM> &  
			     WHERE ORG_CODE=<ORG_CODE> &                               
			       AND ORDER_CODE=<ORDER_CODE> &     
			       AND FROZEN_DATE=<FROZEN_DATE> &
			       AND BATCH_SEQ=<BATCH_SEQ>   
updateQtyCheck.Debug=N


//解除锁定保存
updateUnLock.Type=TSQL
updateUnLock.SQL=UPDATE IND_QTYCHECK SET &
				   UNFREEZE_DATE=<UNFREEZE_DATE> , &
				   UNFREEZE_USER=<UNFREEZE_USER> , &
				   OPT_USER=<OPT_USER> , &
				   OPT_DATE=<OPT_DATE> , &
				   OPT_TERM=<OPT_TERM> &
			     WHERE ORG_CODE=<ORG_CODE> & 
			       AND ORDER_CODE=<ORDER_CODE> &
			       AND FROZEN_DATE=<FROZEN_DATE> &
			       AND BATCH_SEQ=<BATCH_SEQ>
updateUnLock.Debug=N


//盘盈亏统计(汇总)
getQueryQtyCheckMaster.Type=TSQL
getQueryQtyCheckMaster.SQL=SELECT A.ORDER_CODE,B.TYPE_CODE, &
			    B.ORDER_DESC, B.SPECIFICATION, C.UNIT_CHN_DESC, &
			    SUM (A.MODI_QTY) AS CHECK_QTY, &
			    A.VERIFYIN_PRICE AS OWN_PRICE, SUM (A.MODI_QTY) * A.VERIFYIN_PRICE AS OWN_AMT &
		       FROM IND_QTYCHECK A, PHA_BASE B, SYS_UNIT C &
		      WHERE A.ORDER_CODE = B.ORDER_CODE &
		        AND A.DOSAGE_UNIT = C.UNIT_CODE &
		        AND A.UNFREEZE_DATE IS NOT NULL &
		        AND A.ORG_CODE = <ORG_CODE> &
		        AND TO_DATE(A.FROZEN_DATE,'YYYYMMDDHH24MISS') BETWEEN <START_DATE> AND <END_DATE> &
		        GROUP BY B.TYPE_CODE, B.ORDER_DESC, B.SPECIFICATION, &
        		         C.UNIT_CHN_DESC, A.VERIFYIN_PRICE, A.ORDER_CODE &
		        ORDER BY A.ORDER_CODE
getQueryQtyCheckMaster.ITEM=TYPE_CODE;ORDER_CODE;BATCH_NO;OWN_PRICE_A;OWN_PRICE_B;CHECK_QTY_A;CHECK_QTY_B;CHECK_AMT_A;CHECK_AMT_B
getQueryQtyCheckMaster.TYPE_CODE=B.TYPE_CODE=<TYPE_CODE>
getQueryQtyCheckMaster.ORDER_CODE=A.ORDER_CODE=<ORDER_CODE>
getQueryQtyCheckMaster.BATCH_NO=A.BATCH_NO=<BATCH_NO> 
getQueryQtyCheckMaster.OWN_PRICE_A=A.VERIFYIN_PRICE>=<OWN_PRICE_A>
getQueryQtyCheckMaster.OWN_PRICE_B=A.VERIFYIN_PRICE<=<OWN_PRICE_B>
getQueryQtyCheckMaster.CHECK_QTY_A=A.MODI_QTY>=<CHECK_QTY_A>
getQueryQtyCheckMaster.CHECK_QTY_B=A.MODI_QTY<=<CHECK_QTY_B>
getQueryQtyCheckMaster.CHECK_AMT_A=A.MODI_QTY * A.VERIFYIN_PRICE>=<CHECK_AMT_A>
getQueryQtyCheckMaster.CHECK_AMT_B=A.MODI_QTY * A.VERIFYIN_PRICE<=<CHECK_AMT_B>
getQueryQtyCheckMaster.Debug=Y 


//盘盈亏统计(明细)
getQueryQtyCheckDetail.Type=TSQL
getQueryQtyCheckDetail.SQL=SELECT A.UNFREEZE_DATE, A.ORDER_CODE, B.TYPE_CODE, &
			    B.ORDER_DESC, B.SPECIFICATION, C.UNIT_CHN_DESC, A.BATCH_NO, A.VALID_DATE, &
			    A.STOCK_QTY, A.ACTUAL_CHECK_QTY, A.MODI_QTY AS CHECK_QTY, &
			    A.VERIFYIN_PRICE AS OWN_PRICE, A.MODI_QTY * A.VERIFYIN_PRICE AS OWN_AMT &
		      FROM IND_QTYCHECK A, PHA_BASE B, SYS_UNIT C &
		     WHERE A.ORDER_CODE = B.ORDER_CODE &
		       AND A.DOSAGE_UNIT = C.UNIT_CODE &
		       AND A.UNFREEZE_DATE IS NOT NULL &
		       AND A.ORG_CODE = <ORG_CODE> &
		       AND TO_DATE(A.FROZEN_DATE,'YYYYMMDDHH24MISS') BETWEEN <START_DATE> AND <END_DATE> &
		       ORDER BY A.UNFREEZE_DATE, A.ORDER_CODE
getQueryQtyCheckDetail.ITEM=TYPE_CODE;ORDER_CODE;BATCH_NO;OWN_PRICE_A;OWN_PRICE_B;CHECK_QTY_A;CHECK_QTY_B;CHECK_AMT_A;CHECK_AMT_B
getQueryQtyCheckDetail.TYPE_CODE=B.TYPE_CODE=<TYPE_CODE>
getQueryQtyCheckDetail.ORDER_CODE=A.ORDER_CODE=<ORDER_CODE>
getQueryQtyCheckDetail.BATCH_NO=A.BATCH_NO=<BATCH_NO>
getQueryQtyCheckDetail.OWN_PRICE_A=A.VERIFYIN_PRICE>=<OWN_PRICE_A>
getQueryQtyCheckDetail.OWN_PRICE_B=A.VERIFYIN_PRICE<=<OWN_PRICE_B>
getQueryQtyCheckDetail.CHECK_QTY_A=A.MODI_QTY>=<CHECK_QTY_A>
getQueryQtyCheckDetail.CHECK_QTY_B=A.MODI_QTY<=<CHECK_QTY_B>
getQueryQtyCheckDetail.CHECK_AMT_A=A.MODI_QTY * A.VERIFYIN_PRICE>=<CHECK_AMT_A>
getQueryQtyCheckDetail.CHECK_AMT_B=A.MODI_QTY * A.VERIFYIN_PRICE<=<CHECK_AMT_B>
getQueryQtyCheckDetail.Debug=N



