Module.item=insertGiftSalesCardM;insertGiftSalesCardD;updateSysPatInfo;updateRegPatadmCtz;updateOdpOrderCtz; &
		insertMemTrade;selectMemPatInfo;updateMemTrade;updateMemPatInfo;insertMemPatInfo;updateGiftSalesCardM; &
		updateGiftSalesCardD;insertGiftSalesCardMH;insertGiftSalesCardDH;deleteGiftSalesCardD;deleteGiftSalesCardM; &
		selectGiftSalesCardM;selectGiftSalesCardD;insertMemFeeDepreciation;updateMemFeeDepreciation;updateSysPatInfo1; &
		updateMemTradeEndDate;updateMemPatInfoEndDate;addMemTrade;updateMemTradeLD; &
		stopCardInsertMemTrade;stopCardUpdateMemTrade;revokeCardUpdateMemTrade;revokeCardUpdateNewMemTrade;updateMemFeeDepreciationCardNo;&
		updateMemTradeCardNo;updateMemPatInfoGuardian;updateMemTradeData;updateMemPackageData;updateMemGiftCardData;selectMemTradeData;selectMemPackageData;selectMemGiftCardData;updateADMPackageSection;updateADMPackageSectionD;updateADMPackageTradeM; &
		updateMemPatInfoEndDateNew;updatePaceageSection;updatePaceageSectionD;updateOpdOrder; &
		delMemPackageSectionD;insertMemPackageSectionD;updateMemPackageSectionD;updateMemPackageSectionDPrice; &
		delMemPackageSectionDPrice;updateMemPackageSection;updateMemPackageSectionPrice;insertMemPacageSectionDHistory; &
		insertMemPackageSectionDPrice;updateMemPatPackageSectionD;delMemPatPackageSectionD;insertMemPatPackageSectionD; &
		updateMemPackageSectionDUnitPrice;updateMemPackageSectionDPriceOriginal;updateMemPackageSectionPriceOriginal; &
		updateMemPackagePrice;updateCashTypeMemTradeBusinessNo;updateCashTypeMemPackTradeMBusinessNo;updateCashTypeMemGiftcardTradeMBusinessNo;&
		selectMemPackageSectionDByCaseNo
	


//添加礼品卡现金券明细
insertGiftSalesCardD.Type=TSQL
insertGiftSalesCardD.SQL=INSERT INTO MEM_GIFTCARD_TRADE_D &  
               (ID,TRADE_NO,GIFTCARD_CODE,RETAIL_PRICE,FACE_VALUE, &
	       GIFTCARD_NUM,AR_AMT,DESCRIPTION ) &
	       VALUES &
              ( <ID>,<TRADE_NO>,<GIFTCARD_CODE>,<RETAIL_PRICE>,<FACE_VALUE>, &
	      <GIFTCARD_NUM>,<AR_AMT>,<DESCRIPTION> )
               
insertGiftSalesCardD.Debug=N

//添加礼品卡现金券主档
insertGiftSalesCardM.Type=TSQL
insertGiftSalesCardM.SQL=INSERT INTO MEM_GIFTCARD_TRADE_M &  
               (TRADE_NO,PURCHASER_NAME,CERTIFICATE_TYPE,CERTIFICATE_NO,PHONE, &
	       AR_AMT,DESCRIPTION,OPT_USER,OPT_DATE,OPT_TERM, &
	       INTRODUCER1,INTRODUCER2,INTRODUCER3, &
	        PAY_TYPE01,PAY_TYPE02,PAY_TYPE03,PAY_TYPE04,PAY_TYPE05, &
	       PAY_TYPE06,PAY_TYPE07,PAY_TYPE08,PAY_TYPE09,PAY_TYPE10, &
	       REMARK01,REMARK02,REMARK03,REMARK04,REMARK05,REMARK06, &
	       REMARK07,REMARK08,REMARK09,REMARK10) &
	       VALUES &
              ( <TRADE_NO>,<PURCHASER_NAME>,<CERTIFICATE_TYPE>,<CERTIFICATE_NO>,<PHONE>, &
	      <AR_AMT>,<DESCRIPTION>,<OPT_USER>,<OPT_DATE>,<OPT_TERM>, &
	      <INTRODUCER1>,<INTRODUCER2>,<INTRODUCER3>, &
	      <PAY_TYPE01>,<PAY_TYPE02>,<PAY_TYPE03>,<PAY_TYPE04>,<PAY_TYPE05>, &
	      <PAY_TYPE06>,<PAY_TYPE07>,<PAY_TYPE08>,<PAY_TYPE09>,<PAY_TYPE10>, &
	      <REMARK01>,<REMARK02>,<REMARK03>,<REMARK04>,<REMARK05>,<REMARK06>, &
	      <REMARK07>,<REMARK08>,<REMARK09>,<REMARK10> )
               
insertGiftSalesCardM.Debug=N

//修改病患信息表的身份
updateSysPatInfo.Type=TSQL
updateSysPatInfo.SQL=UPDATE SYS_PATINFO SET CTZ1_CODE=<CTZ1_CODE>,CTZ2_CODE=<CTZ2_CODE>,CTZ3_CODE=<CTZ3_CODE>, &
			OPT_USER=<OPT_USER>,OPT_DATE=<OPT_DATE>,OPT_TERM=<OPT_TERM> WHERE MR_NO=<MR_NO>
updateSysPatInfo.Debug=N

//微信支付宝更新交易号码操作,会员卡销售表
updateCashTypeMemTradeBusinessNo.Type=TSQL
updateCashTypeMemTradeBusinessNo.SQL=UPDATE MEM_TRADE SET WX_BUSINESS_NO=<WX_BUSINESS_NO> ,ZFB_BUSINESS_NO=<ZFB_BUSINESS_NO> &
		WHERE TRADE_NO=<TRADE_NO>		
updateCashTypeMemTradeBusinessNo.Debug=N

//微信支付宝更新交易号码操作,套餐销售表
updateCashTypeMemPackTradeMBusinessNo.Type=TSQL
updateCashTypeMemPackTradeMBusinessNo.SQL=UPDATE MEM_PACKAGE_TRADE_M SET WX_BUSINESS_NO=<WX_BUSINESS_NO> ,ZFB_BUSINESS_NO=<ZFB_BUSINESS_NO> &
		WHERE TRADE_NO=<TRADE_NO>		
updateCashTypeMemPackTradeMBusinessNo.Debug=N

//微信支付宝更新交易号码操作,礼品卡销售表
updateCashTypeMemGiftcardTradeMBusinessNo.Type=TSQL
updateCashTypeMemGiftcardTradeMBusinessNo.SQL=UPDATE MEM_GIFTCARD_TRADE_M SET WX_BUSINESS_NO=<WX_BUSINESS_NO> ,ZFB_BUSINESS_NO=<ZFB_BUSINESS_NO> &
		WHERE TRADE_NO=<TRADE_NO>		
updateCashTypeMemGiftcardTradeMBusinessNo.Debug=N

//修改病患信息表的身份
updateSysPatInfo1.Type=TSQL
updateSysPatInfo1.SQL=UPDATE SYS_PATINFO SET CTZ1_CODE=<CTZ1_CODE> WHERE MR_NO=<MR_NO>
updateSysPatInfo1.Debug=N

//修改挂号信息的身份
updateRegPatadmCtz.Type=TSQL
updateRegPatadmCtz.SQL=UPDATE REG_PATADM SET  CTZ1_CODE=<CTZ1_CODE>,CTZ2_CODE=<CTZ2_CODE>,CTZ3_CODE=<CTZ3_CODE> &
			WHERE MR_NO=<MR_NO> AND CASE_NO=<CASE_NO>
updateRegPatadmCtz.Debug=N

//修改OPd_order表中的收费项目的身份，并还原打折前的价格
updateOdpOrderCtz.Type=TSQL
updateOdpOrderCtz.SQL=UPDATE OPD_ORDER SET  CTZ1_CODE=<CTZ1_CODE>,CTZ2_CODE=<CTZ2_CODE>,CTZ3_CODE=<CTZ3_CODE>, &
		      AR_AMT=OWN_AMT WHERE MR_NO=<MR_NO> AND CASE_NO=<CASE_NO> AND ORDER_CODE=<ORDER_CODE>
updateOdpOrderCtz.Debug=N



//插入会员卡交易表
insertMemTrade.Type=TSQL
insertMemTrade.SQL=INSERT INTO MEM_TRADE &  
               (TRADE_NO,STATUS,MR_NO,MEM_CODE,MEM_DESC, &
	       MEM_CARD_NO,MEM_FEE,START_DATE,END_DATE,DESCRIPTION,OPT_DATE,OPT_TERM,OPT_USER,GATHER_TYPE, &
	       PAY_TYPE01,PAY_TYPE02,PAY_TYPE03,PAY_TYPE04,PAY_TYPE05, &
	       PAY_TYPE06,PAY_TYPE07,PAY_TYPE08,PAY_TYPE09,PAY_TYPE10,CARD_TYPE,MEMO1,MEMO2,MEMO3,MEMO4,MEMO5,MEMO6,MEMO7,MEMO8,MEMO9,MEMO10) &
	       VALUES &
              ( <TRADE_NO>,<STATUS>,<MR_NO>,<MEM_CODE>,<MEM_DESC>, &
	      <MEM_CARD_NO>,<MEM_FEE>,<START_DATE>,<END_DATE>,<DESCRIPTION>,<OPT_DATE>,<OPT_TERM>,<OPT_USER>,<GATHER_TYPE>,&
	      <PAY_TYPE01>,<PAY_TYPE02>,<PAY_TYPE03>,<PAY_TYPE04>,<PAY_TYPE05>,&
	      <PAY_TYPE06>,<PAY_TYPE07>,<PAY_TYPE08>,<PAY_TYPE09>,<PAY_TYPE10>,<CARD_TYPE>,<MEMO1>,<MEMO2>,<MEMO3>,<MEMO4>,<MEMO5>,<MEMO6>,<MEMO7>,<MEMO8>,<MEMO9>,<MEMO10>)
               
insertMemTrade.Debug=N

//查询会员信息
selectMemPatInfo.Type=TSQL
selectMemPatInfo.SQL=SELECT MR_NO, MEM_CODE, MEM_DESC, START_DATE, END_DATE, FAMILY_DOCTOR,  &
       ACCOUNT_MANAGER_NAME, ACCOUNT_MANAGER_CODE, INSURANCE_COMPANY1_CODE, &
       INSURANCE_COMPANY1_NAME, INSURANCE_COMPANY2_CODE, &
       INSURANCE_COMPANY2_NAME, INSURANCE_COMPANY3_CODE, &
       INSURANCE_COMPANY3_NAME, INSURANCE_NUMBER1, INSURANCE_NUMBER2, &
       INSURANCE_NUMBER3, SCHOOL_NAME, SCHOOL_TEL, BIRTH_HOSPITAL, &
       WEIXIN_ACCOUNT, SOURCE, GUARDIAN1_NAME, GUARDIAN1_RELATION, &
       GUARDIAN1_TEL, GUARDIAN1_PHONE, GUARDIAN1_COM, GUARDIAN1_ID_TYPE, &
       GUARDIAN1_ID_CODE, GUARDIAN1_EMAIL, GUARDIAN2_NAME, GUARDIAN2_RELATION, &
       GUARDIAN2_TEL, GUARDIAN2_PHONE, GUARDIAN2_COM, GUARDIAN2_ID_TYPE, &
       GUARDIAN2_ID_CODE, GUARDIAN2_EMAIL, DEFAULT_GUARDIAN,REG_CTZ1_CODE,REG_CTZ2_CODE,REASON &
       FROM MEM_PATINFO &
       WHERE MR_NO = <MR_NO> AND END_DATE > SYSDATE           
selectMemPatInfo.Debug=N

//更新交易表
updateMemTrade.Type = TSQL
updateMemTrade.SQL=UPDATE MEM_TRADE SET STATUS='1',LAST_DEPRECIATION_END_DATE=<LAST_DEPRECIATION_END_DATE> , &
			MEM_CODE=<MEM_CODE>,MEM_DESC=<MEM_DESC>,START_DATE=<START_DATE>,END_DATE=<END_DATE>, &
			MEM_FEE=<MEM_FEE> ,GATHER_TYPE=<GATHER_TYPE>,SALE_USER=<SALE_USER>,SALE_DATE=<SALE_DATE>, &
			PAY_TYPE01=<PAY_TYPE01>,PAY_TYPE02=<PAY_TYPE02>,PAY_TYPE03=<PAY_TYPE03>,PAY_TYPE04=<PAY_TYPE04>,PAY_TYPE05=<PAY_TYPE05>, &
			PAY_TYPE06=<PAY_TYPE06>,PAY_TYPE07=<PAY_TYPE07>,PAY_TYPE08=<PAY_TYPE08>,PAY_TYPE09=<PAY_TYPE09>,PAY_TYPE10=<PAY_TYPE10>,PAY_TYPE11=<PAY_TYPE11>, &
			MEMO1=<MEMO1>,MEMO2=<MEMO2>,MEMO3=<MEMO3>,MEMO4=<MEMO4>,MEMO5=<MEMO5>,MEMO6=<MEMO6>,MEMO7=<MEMO7>,MEMO8=<MEMO8>,MEMO9=<MEMO9>, &
			MEMO10=<MEMO10>,MEMO11=<MEMO11>,CARD_TYPE=<CARD_TYPE> &
		WHERE TRADE_NO=<TRADE_NO>			
updateMemTrade.Debug=N

//更新会员信息表
updateMemPatInfo.Type = TSQL
updateMemPatInfo.SQL=UPDATE MEM_PATINFO SET MEM_CODE=<MEM_CODE>,MEM_DESC=<MEM_DESC>,START_DATE=<START_DATE>,END_DATE=<END_DATE> WHERE MR_NO=<MR_NO>			
updateMemPatInfo.Debug=N


insertMemPatInfo.Type = TSQL
insertMemPatInfo.SQL=INSERT INTO MEM_PATINFO &  
               (MR_NO,GUARDIAN1_NAME,GUARDIAN1_RELATION,CUSTOMER_SOURCE ) &
	       VALUES &
              (<MR_NO>,<GUARDIAN1_NAME>,<GUARDIAN1_RELATION>,<CUSTOMER_SOURCE>  )
insertMemPatInfo.Debug=N


updateMemPatInfoGuardian.Type = TSQL
updateMemPatInfoGuardian.SQL=UPDATE MEM_PATINFO SET GUARDIAN1_NAME=<GUARDIAN1_NAME>,GUARDIAN1_RELATION=<GUARDIAN1_RELATION>,CUSTOMER_SOURCE=<CUSTOMER_SOURCE> WHERE MR_NO=<MR_NO>			
updateMemPatInfoGuardian.Debug=N

//更新礼品卡交易细表
updateGiftSalesCardD.Type = TSQL
updateGiftSalesCardD.SQL=UPDATE MEM_GIFTCARD_TRADE_D  &
			SET GIFTCARD_CODE=<GIFTCARD_CODE>,RETAIL_PRICE=<RETAIL_PRICE>,FACE_VALUE=<FACE_VALUE>, &
			GIFTCARD_NUM=<GIFTCARD_NUM>,AR_AMT=<AR_AMT>,DESCRIPTION=<DESCRIPTION> &
			WHERE TRADE_NO=<TRADE_NO> AND ID=<ID>
updateGiftSalesCardD.Debug=N


//更新礼品卡交易主表
updateGiftSalesCardM.Type = TSQL
updateGiftSalesCardM.SQL=UPDATE MEM_GIFTCARD_TRADE_M   &
		SET PURCHASER_NAME=<PURCHASER_NAME> ,CERTIFICATE_TYPE=<CERTIFICATE_TYPE>,CERTIFICATE_NO=<CERTIFICATE_NO>, &
		PHONE=<PHONE>,AR_AMT=<AR_AMT>,DESCRIPTION=<DESCRIPTION>, &
		OPT_USER=<OPT_USER>,OPT_DATE=<OPT_DATE>,OPT_TERM=<OPT_TERM>, &
		INTRODUCER1=<INTRODUCER1>,INTRODUCER2=<INTRODUCER2>,INTRODUCER3=<INTRODUCER3>, &
		PAY_TYPE01=<PAY_TYPE01>,PAY_TYPE02=<PAY_TYPE02>,PAY_TYPE03=<PAY_TYPE03>,PAY_TYPE04=<PAY_TYPE04>, &
		PAY_TYPE05=<PAY_TYPE05>,PAY_TYPE06=<PAY_TYPE06>,PAY_TYPE07=<PAY_TYPE07>, &
		PAY_TYPE08=<PAY_TYPE08>,PAY_TYPE09=<PAY_TYPE09>,PAY_TYPE10=<PAY_TYPE10> &
		WHERE TRADE_NO=<TRADE_NO>	
updateGiftSalesCardM.Debug=N

//添加礼品卡现金券明细历史
insertGiftSalesCardDH.Type=TSQL
insertGiftSalesCardDH.SQL=INSERT INTO MEM_GIFTCARD_TRADE_D_HISTORY &  
               (ACTION_DATE,ID,TRADE_NO,GIFTCARD_CODE,RETAIL_PRICE,FACE_VALUE, &
	       GIFTCARD_NUM,AR_AMT,DESCRIPTION ) &
	       VALUES &
              (<ACTION_DATE>, <ID>,<TRADE_NO>,<GIFTCARD_CODE>,<RETAIL_PRICE>,<FACE_VALUE>, &
	      <GIFTCARD_NUM>,<AR_AMT>,<DESCRIPTION> )
               
insertGiftSalesCardDH.Debug=N

//添加礼品卡现金券主档历史
insertGiftSalesCardMH.Type=TSQL
insertGiftSalesCardMH.SQL=INSERT INTO MEM_GIFTCARD_TRADE_M_HISTORY &  
               (ACTION_TYPE,ACTION_DATE,TRADE_NO,PURCHASER_NAME,CERTIFICATE_TYPE,CERTIFICATE_NO,PHONE, &
	       AR_AMT,DESCRIPTION,OPT_USER,OPT_DATE,OPT_TERM, &
	       INTRODUCER1,INTRODUCER2,INTRODUCER3, &
	        PAY_TYPE01,PAY_TYPE02,PAY_TYPE03,PAY_TYPE04,PAY_TYPE05, &
	       PAY_TYPE06,PAY_TYPE07,PAY_TYPE08,PAY_TYPE09,PAY_TYPE10) &
	       VALUES &
              (<ACTION_TYPE>,<ACTION_DATE>,<TRADE_NO>,<PURCHASER_NAME>,<CERTIFICATE_TYPE>,<CERTIFICATE_NO>,<PHONE>, &
	      <AR_AMT>,<DESCRIPTION>,<OPT_USER>,<OPT_DATE>,<OPT_TERM>, &
	      <INTRODUCER1>,<INTRODUCER2>,<INTRODUCER3>, &
	      <PAY_TYPE01>,<PAY_TYPE02>,<PAY_TYPE03>,<PAY_TYPE04>,<PAY_TYPE05>,&
	      <PAY_TYPE06>,<PAY_TYPE07>,<PAY_TYPE08>,<PAY_TYPE09>,<PAY_TYPE10>)
               
insertGiftSalesCardMH.Debug=N

//查询礼品卡现金券主档
selectGiftSalesCardM.Type=TSQL
selectGiftSalesCardM.SQL=SELECT TRADE_NO, PURCHASER_NAME, CERTIFICATE_TYPE, CERTIFICATE_NO, PHONE,  &
			AR_AMT, DESCRIPTION, OPT_USER, OPT_DATE, OPT_TERM, INTRODUCER1,  &
			INTRODUCER2, INTRODUCER3,  &
			 PAY_TYPE01,PAY_TYPE02,PAY_TYPE03,PAY_TYPE04,PAY_TYPE05, &
	                 PAY_TYPE06,PAY_TYPE07,PAY_TYPE08,PAY_TYPE09,PAY_TYPE10, &
	                 REMARK01,REMARK02,REMARK03,REMARK04,REMARK05,REMARK06, &
	                 REMARK07,REMARK08,REMARK09,REMARK10 &
			FROM MEM_GIFTCARD_TRADE_M  &
			WHERE TRADE_NO=<TRADE_NO>               
selectGiftSalesCardM.Debug=N

//查询礼品卡现金券明细表
selectGiftSalesCardD.Type=TSQL
selectGiftSalesCardD.SQL=SELECT ID, TRADE_NO, GIFTCARD_CODE, RETAIL_PRICE, FACE_VALUE, GIFTCARD_NUM,  &
			 AR_AMT, DESCRIPTION  &
			 FROM MEM_GIFTCARD_TRADE_D  &
			 WHERE TRADE_NO=<TRADE_NO>   &
			 ORDER BY ID                
selectGiftSalesCardD.Debug=N

//删除礼品卡现金券主档

deleteGiftSalesCardM.Type=TSQL
deleteGiftSalesCardM.SQL=DELETE FROM MEM_GIFTCARD_TRADE_M WHERE TRADE_NO=<TRADE_NO>                
deleteGiftSalesCardM.Debug=N

//删除礼品卡现金券明细表

deleteGiftSalesCardD.Type=TSQL
deleteGiftSalesCardD.SQL=DELETE FROM MEM_GIFTCARD_TRADE_D WHERE TRADE_NO=<TRADE_NO>                
deleteGiftSalesCardD.Debug=N

//添加会员费折旧记录
insertMemFeeDepreciation.Type=TSQL
insertMemFeeDepreciation.SQL=INSERT INTO MEM_FEE_DEPRECIATION &  
               (MR_NO,MEM_CARD_NO,DEPRECIATION_FEE,DEPRECIATION_START_DATE,DEPRECIATION_END_DATE,  &
	       REMAINING_AMOUNT,BEFORE_AMOUNT, STATUS,OPT_USER,OPT_DATE,OPT_TERM) &
	       VALUES &
              (<MR_NO>,<MEM_CARD_NO>,<DEPRECIATION_FEE>,<DEPRECIATION_START_DATE>,<DEPRECIATION_END_DATE>, &
	      <REMAINING_AMOUNT>,<BEFORE_AMOUNT>,<STATUS>,<OPT_USER>,<OPT_DATE>,<OPT_TERM>)
               
insertMemFeeDepreciation.Debug=N

//更新会员费折旧记录
updateMemFeeDepreciation.Type=TSQL
updateMemFeeDepreciation.SQL=UPDATE MEM_FEE_DEPRECIATION   &
		SET DEPRECIATION_FEE=<DEPRECIATION_FEE> ,DEPRECIATION_START_DATE=<DEPRECIATION_START_DATE>,DEPRECIATION_END_DATE=<DEPRECIATION_END_DATE>, &
		REMAINING_AMOUNT=<REMAINING_AMOUNT>,BEFORE_AMOUNT=<BEFORE_AMOUNT>,STATUS=<STATUS>, &
		OPT_USER=<OPT_USER>,OPT_DATE=<OPT_DATE>,OPT_TERM=<OPT_TERM> &
		WHERE MR_NO=<MR_NO> AND MEM_CARD_NO=<MEM_CARD_NO>              
updateMemFeeDepreciation.Debug=N

//更新交易表中的结束时间
updateMemTradeEndDate.Type = TSQL
updateMemTradeEndDate.SQL=UPDATE MEM_TRADE SET END_DATE=<END_DATE> &
		,REMOVE_FLG='Y', RETURN_USER=<RETURN_USER>, RETURN_DATE=<RETURN_DATE>,  &
		OPT_USER=<OPT_USER>,OPT_DATE=<OPT_DATE>,OPT_TERM=<OPT_TERM> &
		WHERE  MR_NO=<MR_NO> AND STATUS='1' AND END_DATE > SYSDATE AND MEM_CARD_NO=<MEM_CARD_NO>		
updateMemTradeEndDate.Debug=N

//更新会员表中的结束时间
updateMemPatInfoEndDate.Type = TSQL
updateMemPatInfoEndDate.SQL=UPDATE MEM_PATINFO SET MEM_CODE='',MEM_DESC='',START_DATE='', END_DATE='' &
		WHERE  MR_NO=<MR_NO> 		
updateMemPatInfoEndDate.Debug=N

//新增交易表数据 add by sunqy MEMO2记录备注处银行卡号
addMemTrade.Type = TSQL
addMemTrade.SQL=INSERT INTO MEM_TRADE(TRADE_NO,STATUS,MR_NO,MEM_CODE,MEM_DESC,MEM_CARD_NO,MEM_FEE, &
		START_DATE,END_DATE,DESCRIPTION,OPT_USER,OPT_TERM,OPT_DATE,LAST_DEPRECIATION_END_DATE,GATHER_TYPE,&
		PAY_TYPE01,PAY_TYPE02,PAY_TYPE03,PAY_TYPE04,PAY_TYPE05,PAY_TYPE06,PAY_TYPE07,PAY_TYPE08,PAY_TYPE09,PAY_TYPE10, &
		MEMO1,MEMO2,MEMO3,MEMO4,MEMO5,MEMO6,MEMO7,MEMO8,MEMO9,MEMO10,CARD_TYPE, &
		INTRODUCER1,INTRODUCER2,INTRODUCER3,PAY_TYPE11,MEMO11 ) &
		VALUES(<TRADE_NO>,1,<MR_NO>,<MEM_CODE>,<MEM_DESC>,<MEM_CARD_NO>,<MEM_FEE>,<START_DATE>,<END_DATE>, &
		<DESCRIPTION>,<OPT_USER>,<OPT_TERM>,sysdate,<LAST_DEPRECIATION_END_DATE>,<GATHER_TYPE>, &
		<PAY_TYPE01>,<PAY_TYPE02>,<PAY_TYPE03>,<PAY_TYPE04>,<PAY_TYPE05>,<PAY_TYPE06>, &
		<PAY_TYPE07>,<PAY_TYPE08>,<PAY_TYPE09>,<PAY_TYPE10>, &
		<MEMO1>,<MEMO2>,<MEMO3>,<MEMO4>,<MEMO5>,<MEMO6>,<MEMO7>,<MEMO8>,<MEMO9>,<MEMO10>,<CARD_TYPE>, &
		<INTRODUCER1>,<INTRODUCER2>,<INTRODUCER3>,<PAY_TYPE11>,<MEMO11>)
addMemTrade.Debug=N

//停卡更新交易表
stopCardUpdateMemTrade.Type = TSQL
stopCardUpdateMemTrade.SQL=UPDATE MEM_TRADE SET REMOVE_FLG='Y', RETURN_USER=<RETURN_USER>, RETURN_DATE=<RETURN_DATE>,  &
		OPT_USER=<OPT_USER>,OPT_DATE=<OPT_DATE>,OPT_TERM=<OPT_TERM> &	
		WHERE  MR_NO=<MR_NO> AND STATUS='1' AND END_DATE > SYSDATE  AND MEM_CARD_NO = <MEM_CARD_NO> 		
stopCardUpdateMemTrade.Debug=N

//停卡在交易表中新增一条记录
stopCardInsertMemTrade.Type = TSQL
stopCardInsertMemTrade.SQL=INSERT INTO MEM_TRADE(TRADE_NO,STATUS,MR_NO,MEM_CODE,MEM_FEE,MEM_CARD_NO, &
		DESCRIPTION,OPT_USER,OPT_TERM,OPT_DATE,GATHER_TYPE,REMOVE_FLG,RETURN_TRADE_NO,START_DATE,END_DATE,STOP_CARD_DESCRIPTION,PAY_TYPE01,PAY_TYPE02,PAY_TYPE03,PAY_TYPE04,PAY_TYPE05, &
	       PAY_TYPE06,PAY_TYPE07,PAY_TYPE08,PAY_TYPE09,PAY_TYPE10) &
		VALUES(<TRADE_NO>,<STATUS>,<MR_NO>,<MEM_CODE>,<MEM_FEE>,<MEM_CARD_NO>, &
		<DESCRIPTION>,<OPT_USER>,<OPT_TERM>,SYSDATE,<GATHER_TYPE>,<REMOVE_FLG>,<RETURN_TRADE_NO>,<START_DATE>,<END_DATE>,<STOP_CARD_DESCRIPTION>,<PAY_TYPE01>,<PAY_TYPE02>,<PAY_TYPE03>,<PAY_TYPE04>,<PAY_TYPE05>,&
	      <PAY_TYPE06>,<PAY_TYPE07>,<PAY_TYPE08>,<PAY_TYPE09>,<PAY_TYPE10>)
stopCardInsertMemTrade.Debug=N

//取消停卡更新交易表
revokeCardUpdateMemTrade.Type = TSQL
revokeCardUpdateMemTrade.SQL=UPDATE MEM_TRADE SET REMOVE_FLG='N', RETURN_USER='', RETURN_DATE=''  &	
		WHERE  MR_NO=<MR_NO> AND STATUS='1' AND MEM_CARD_NO = <MEM_CARD_NO> AND REMOVE_FLG='Y' 		
revokeCardUpdateMemTrade.Debug=N

//将停卡记录状态更新为作废 RETURN_TRADE_NO = <TRADE_NO> 
revokeCardUpdateNewMemTrade.Type = TSQL
revokeCardUpdateNewMemTrade.SQL=UPDATE MEM_TRADE SET REMOVE_FLG='Y'  &	
		WHERE  MR_NO=<MR_NO> AND STATUS='3' AND MEM_CARD_NO = <MEM_CARD_NO> AND REMOVE_FLG='N'		
revokeCardUpdateNewMemTrade.Debug=N


//更新交易表折旧时间
updateMemTradeLD.Type = TSQL
updateMemTradeLD.SQL=UPDATE MEM_TRADE SET LAST_DEPRECIATION_END_DATE=<LAST_DEPRECIATION_END_DATE>  &
		WHERE MR_NO=<MR_NO> AND STATUS='1' AND MEM_CARD_NO=<MEM_CARD_NO>		
updateMemTradeLD.Debug=N

//换卡时更新交易表中的卡号
updateMemTradeCardNo.Type = TSQL
updateMemTradeCardNo.SQL=UPDATE MEM_TRADE SET MEM_CARD_NO=<MEM_CARD_NO>  &
		WHERE MR_NO=<MR_NO> AND STATUS='1' AND MEM_CARD_NO=<MEM_CARD_NO_OLD> AND REMOVE_FLG='N'		
updateMemTradeCardNo.Debug=N


//更新折旧表中的卡号
updateMemFeeDepreciationCardNo.Type = TSQL
updateMemFeeDepreciationCardNo.SQL=UPDATE MEM_FEE_DEPRECIATION SET MEM_CARD_NO=<MEM_CARD_NO>  &
		WHERE MR_NO=<MR_NO>  AND MEM_CARD_NO=<MEM_CARD_NO_OLD>		
updateMemFeeDepreciationCardNo.Debug=N

//会员卡日结时更新表格数据
updateMemTradeData.Type = TSQL
updateMemTradeData.SQL=UPDATE MEM_TRADE SET ACCOUNT_FLG='Y',ACCOUNT_SEQ = <ACCOUNT_SEQ>,ACCOUNT_USER = <ACCOUNT_USER>,ACCOUNT_DATE = SYSDATE  &
		WHERE STATUS IN ('1','2','3','4') AND (SALE_DATE<TO_DATE(<BUSINESS_DATE>,'YYYYMMDDHH24MISS') OR SALE_DATE IS NULL) AND OPT_USER = <ACCOUNT_USER> &
                  AND (ACCOUNT_FLG='N' OR ACCOUNT_FLG IS NULL) 
updateMemTradeData.Debug=N

//套餐日结时更新表格数据
updateMemPackageData.Type = TSQL
updateMemPackageData.SQL=UPDATE MEM_PACKAGE_TRADE_M SET ACCOUNT_FLG='Y',ACCOUNT_SEQ = <ACCOUNT_SEQ>,ACCOUNT_USER = <ACCOUNT_USER>,ACCOUNT_DATE = SYSDATE  &
		WHERE BILL_DATE<TO_DATE(<BUSINESS_DATE>,'YYYYMMDDHH24MISS' )  AND CASHIER_CODE = <ACCOUNT_USER> &
                  AND (ACCOUNT_FLG='N' OR ACCOUNT_FLG IS NULL) 
updateMemPackageData.Debug=N

//礼品卡日结时更新表格数据
updateMemGiftCardData.Type = TSQL
updateMemGiftCardData.SQL=UPDATE MEM_GIFTCARD_TRADE_M SET ACCOUNT_FLG='Y',ACCOUNT_SEQ = <ACCOUNT_SEQ>,ACCOUNT_USER = <ACCOUNT_USER>,ACCOUNT_DATE = SYSDATE  &
		WHERE OPT_DATE<TO_DATE(<BUSINESS_DATE>,'YYYYMMDDHH24MISS') AND OPT_USER = <ACCOUNT_USER>  &
                  AND (ACCOUNT_FLG='N' OR ACCOUNT_FLG IS NULL) 
updateMemGiftCardData.Debug=N


//查询是否有会员卡日结时更新表格数据
selectMemTradeData.Type = TSQL
selectMemTradeData.SQL=SELECT TRADE_NO FROM MEM_TRADE  &
		WHERE STATUS IN ('1','2','3','4') AND (SALE_DATE<TO_DATE(<BUSINESS_DATE>,'YYYYMMDDHH24MISS') OR SALE_DATE IS NULL) &
                  AND (ACCOUNT_FLG='N' OR ACCOUNT_FLG IS NULL) AND OPT_USER =  <ACCOUNT_USER> 
selectMemTradeData.Debug=N

//查询是否有套餐日结时更新表格数据
selectMemPackageData.Type = TSQL
selectMemPackageData.SQL=SELECT TRADE_NO FROM MEM_PACKAGE_TRADE_M   &
		WHERE BILL_DATE<TO_DATE(<BUSINESS_DATE>,'YYYYMMDDHH24MISS') AND CASHIER_CODE =  <ACCOUNT_USER> &
                  AND (ACCOUNT_FLG='N' OR ACCOUNT_FLG IS NULL) 
selectMemPackageData.Debug=N

//查询是否有礼品卡日结时更新表格数据
selectMemGiftCardData.Type = TSQL
selectMemGiftCardData.SQL=SELECT TRADE_NO FROM MEM_GIFTCARD_TRADE_M   &
		WHERE OPT_DATE<TO_DATE(<BUSINESS_DATE>,'YYYYMMDDHH24MISS') AND OPT_USER =  <ACCOUNT_USER> &
                  AND (ACCOUNT_FLG='N' OR ACCOUNT_FLG IS NULL) 
selectMemGiftCardData.Debug=N

//停卡时更新会员表
updateMemPatInfoEndDateNew.Type = TSQL
updateMemPatInfoEndDateNew.SQL=UPDATE MEM_PATINFO SET END_DATE=<END_DATE> &
		WHERE  MR_NO=<MR_NO> 		
updateMemPatInfoEndDateNew.Debug=N


//更新套餐主表
updatePaceageSection.Type = TSQL
updatePaceageSection.SQL=UPDATE MEM_PAT_PACKAGE_SECTION SET CASE_NO=<CASE_NO>,USED_FLG=1 &
		WHERE  MR_NO=<MR_NO> AND TRADE_NO=<TRADE_NO> AND ID=<ID>		
updatePaceageSection.Debug=N

//更新套餐细表
updatePaceageSectionD.Type = TSQL
updatePaceageSectionD.SQL=UPDATE MEM_PAT_PACKAGE_SECTION_D SET CASE_NO=<CASE_NO>,USED_FLG=1 &
		WHERE  MR_NO=<MR_NO> AND TRADE_NO=<TRADE_NO> AND ID=<ID> AND ORDER_CODE=<ORDER_CODE>		
updatePaceageSectionD.Debug=N

//更新套餐主表(住院登记使用)--add by xiongwg20150703
updateADMPackageSection.Type = TSQL
updateADMPackageSection.SQL=UPDATE MEM_PAT_PACKAGE_SECTION SET CASE_NO=<CASE_NO>,USED_FLG=<USED_FLG> &
		WHERE  MR_NO=<MR_NO> AND TRADE_NO=<TRADE_NO> 		
updateADMPackageSection.Debug=N

//更新套餐细表(住院登记使用)--add by xiongwg20150703
updateADMPackageSectionD.Type = TSQL
updateADMPackageSectionD.SQL=UPDATE MEM_PAT_PACKAGE_SECTION_D SET CASE_NO=<CASE_NO>,USED_FLG=<USED_FLG>,OPT_USER=<OPT_USER>,OPT_TERM=<OPT_TERM>,OPT_DATE=SYSDATE &
		WHERE  MR_NO=<MR_NO> AND TRADE_NO=<TRADE_NO>		
updateADMPackageSectionD.Debug=N

//更新套餐主档(住院登记使用)--add by xiongwg20150703
updateADMPackageTradeM.Type = TSQL
updateADMPackageTradeM.SQL=UPDATE MEM_PACKAGE_TRADE_M SET CASE_NO=<CASE_NO>,USED_FLG=<USED_FLG>,OPT_USER=<OPT_USER>,OPT_TERM=<OPT_TERM>,OPT_DATE=SYSDATE &
		WHERE  MR_NO=<MR_NO> AND TRADE_NO=<TRADE_NO>		
updateADMPackageTradeM.Debug=N


//更新医嘱
updateOpdOrder.Type = TSQL
updateOpdOrder.SQL=UPDATE OPD_ORDER SET MEM_PACKAGE_ID=<MEM_PACKAGE_ID>,AR_AMT=<RETAIL_PRICE>,MEM_PACKAGE_FLG='Y' &
		WHERE  RX_NO=<RX_NO> AND CASE_NO=<CASE_NO>  AND SEQ_NO=<SEQ_NO>  
updateOpdOrder.Debug=N

//套餐项目变更时，删除除旧集合医嘱的细项
delMemPackageSectionDPrice.Type = TSQL
delMemPackageSectionDPrice.SQL=DELETE FROM MEM_PACKAGE_SECTION_D_PRICE &
 						WHERE ID IN (SELECT ID FROM MEM_PACKAGE_SECTION_D &
                 			WHERE  ORDERSET_CODE = <ORDERSET_CODE> &
                      		AND SECTION_CODE = <SECTION_CODE> &
            				AND PACKAGE_CODE = <PACKAGE_CODE> &
            				AND ORDERSET_GROUP_NO = <ORDERSET_GROUP_NO> &
           					AND HIDE_FLG = 'Y')
delMemPackageSectionDPrice.Debug=N


//套餐项目变更时，删除除旧集合医嘱的细项
delMemPackageSectionD.Type = TSQL
delMemPackageSectionD.SQL=DELETE FROM MEM_PACKAGE_SECTION_D &
					WHERE ORDERSET_CODE = <ORDERSET_CODE> &
            		AND SECTION_CODE = <SECTION_CODE> &
            		AND PACKAGE_CODE = <PACKAGE_CODE> &
            		AND ORDERSET_GROUP_NO = <ORDERSET_GROUP_NO> &
           			AND HIDE_FLG = 'Y'
delMemPackageSectionD.Debug=N

//套餐项目变更时，添加新集合医嘱的细项
insertMemPackageSectionD.Type = TSQL  
insertMemPackageSectionD.SQL = INSERT INTO MEM_PACKAGE_SECTION_D &
							  (ID,SECTION_DESC,ORDER_CODE,ORDER_DESC,ORDER_NUM,UNIT_CODE, &
							  UNIT_PRICE,RETAIL_PRICE,OPT_DATE,OPT_USER,OPT_TERM,SECTION_CODE, &
							  PACKAGE_CODE,SETMAIN_FLG,ORDERSET_CODE,HIDE_FLG,ORDERSET_GROUP_NO,VERSION_NUMBER,UN_NUM_FLG &
							  ) VALUES( &
							  <ID>,<SECTION_DESC>,<ORDER_CODE>,<ORDER_DESC>,<ORDER_NUM>,<UNIT_CODE>, &
							  <UNIT_PRICE>,<RETAIL_PRICE>,SYSDATE,<OPT_USER>,<OPT_TERM>,<SECTION_CODE>, &
							  <PACKAGE_CODE>,<SETMAIN_FLG>,<ORDERSET_CODE>,<HIDE_FLG>,<ORDERSET_GROUP_NO>,<VERSION_NUMBER>,<UN_NUM_FLG> &
							  )
insertMemPackageSectionD.Debug=N	

//套餐项目变更时，将新医嘱价钱更新到时程的总价里 MEM_PACKAGE_SECTION
updateMemPackageSection.Type = TSQL  	
updateMemPackageSection.SQL = UPDATE MEM_PACKAGE_SECTION  &
							SET ORIGINAL_PRICE = <ORIGINAL_PRICE>,  &
							VERSION_NUMBER=<VERSION_NUMBER>,  &
							OPT_DATE=SYSDATE,OPT_USER=<OPT_USER>,OPT_TERM=<OPT_TERM> &
							WHERE PACKAGE_CODE = <PACKAGE_CODE> AND SECTION_CODE = <SECTION_CODE> 
updateMemPackageSection.Debug=N

//套餐项目变更时，将新医嘱价钱更新到时程的总价里，计算折扣率  MEM_PACKAGE_SECTION_PRICE
updateMemPackageSectionPrice.Type = TSQL  	
updateMemPackageSectionPrice.SQL = UPDATE MEM_PACKAGE_SECTION_PRICE  &
								   SET ORIGINAL_PRICE = <ORIGINAL_PRICE>,  &
								    DISCOUNT_RATE = ROUND (SECTION_PRICE / <ORIGINAL_PRICE>, 2),  &
								     VERSION_NUMBER=<VERSION_NUMBER>,  &
								     OPT_DATE=SYSDATE,OPT_USER=<OPT_USER>,OPT_TERM=<OPT_TERM> &
								   WHERE PACKAGE_CODE =  <PACKAGE_CODE> AND SECTION_CODE = <SECTION_CODE>  
updateMemPackageSectionPrice.Debug=N



//套餐项目变更时，将新医嘱更新对旧医嘱上面
updateMemPackageSectionD.Type = TSQL  	
updateMemPackageSectionD.SQL = UPDATE MEM_PACKAGE_SECTION_D  &
							SET ORDER_CODE=<ORDER_CODE>,ORDER_DESC=<ORDER_DESC>, &
							UNIT_CODE=<UNIT_CODE>,UNIT_PRICE=<UNIT_PRICE>, &
							VERSION_NUMBER=<VERSION_NUMBER>, UN_NUM_FLG=<UN_NUM_FLG>, &
							OPT_DATE=SYSDATE,OPT_USER=<OPT_USER>,OPT_TERM=<OPT_TERM>, &
							ORDERSET_CODE=<ORDERSET_CODE> WHERE ID=<ID>
updateMemPackageSectionD.Debug=N

//套餐项目变更时，更新MEM_PACKAGE_SECTION_D_PRICE表中的折扣率与原价
updateMemPackageSectionDPrice.Type = TSQL  	
updateMemPackageSectionDPrice.SQL = UPDATE MEM_PACKAGE_SECTION_D_PRICE  &
									SET ORIGINAL_PRICE=<SUM_PRICE>,  &
									DISCOUNT_RATE= ROUND (RETAIL_PRICE / <SUM_PRICE>, 2),  &
									VERSION_NUMBER=<VERSION_NUMBER>,  &
									OPT_DATE=SYSDATE,OPT_USER=<OPT_USER>,OPT_TERM=<OPT_TERM> &
									WHERE ID=<ID> AND SECTION_CODE=<SECTION_CODE> AND PACKAGE_CODE=<PACKAGE_CODE>

updateMemPackageSectionDPrice.Debug=N	

//插入历史表
insertMemPacageSectionDHistory.Type = TSQL  	
insertMemPacageSectionDHistory.SQL = INSERT INTO MEM_PACKAGE_SECTION_D_HISTORY  &
 									(ID,REPLACE_DATE,SECTION_CODE,PACKAGE_CODE,SECTION_DESC,  &
 									PACKAGE_DESC,ORDER_CODE,ORDER_DESC,ORDER_NUM,UNIT_CODE,  &
 									UNIT_PRICE,NEW_ORDER_CODE,NEW_ORDER_DESC,NEW_UNIT_CODE,  &
 									NEW_UNIT_PRICE,OPT_DATE,OPT_USER,OPT_TERM,  &
 									SETMAIN_FLG,ORDERSET_CODE,HIDE_FLG,ORDERSET_GROUP_NO)   &
 									VALUES   &
 									(<ID>,<VERSION_NUMBER>,<SECTION_CODE>,<PACKAGE_CODE>,<SECTION_DESC>,  &
 									<PACKAGE_DESC>,<ORDER_CODE>,<ORDER_DESC>,<ORDER_NUM>,<UNIT_CODE>,  &
 									<UNIT_PRICE>,<NEW_ORDER_CODE>,<NEW_ORDER_DESC>,<NEW_UNIT_CODE>,  &
 									<NEW_UNIT_PRICE>,SYSDATE,<OPT_USER>,<OPT_TERM>,  &
									<SETMAIN_FLG>,<ORDERSET_CODE>,<HIDE_FLG>,<ORDERSET_GROUP_NO>)
insertMemPacageSectionDHistory.Debug=N

//套餐项目变更时，添加新集合医嘱的细项价钱MEM_PACKAGE_SECTION_D_PRICE
insertMemPackageSectionDPrice.Type = TSQL
insertMemPackageSectionDPrice.SQL = INSERT INTO MEM_PACKAGE_SECTION_D_PRICE &
									(PRICE_TYPE,ID,SECTION_CODE,PACKAGE_CODE,RETAIL_PRICE, &
									 DISCOUNT_RATE,OPT_USER,OPT_DATE, &
									 OPT_TERM,ORIGINAL_PRICE,VERSION_NUMBER &
									 )VALUES( &
									 <PRICE_TYPE>,<ID>,<SECTION_CODE>,<PACKAGE_CODE>,<RETAIL_PRICE>, &
									 ROUND (<RETAIL_PRICE> / <ORIGINAL_PRICE>, 2),<OPT_USER>,SYSDATE, &
									 <OPT_TERM>,<ORIGINAL_PRICE>,<VERSION_NUMBER>)
insertMemPackageSectionDPrice.Debug=N

//套餐项目变更时，将新医嘱更到已卖出的时程上
updateMemPatPackageSectionD.Type = TSQL  	
updateMemPatPackageSectionD.SQL = UPDATE MEM_PAT_PACKAGE_SECTION_D  &
							SET ORDER_CODE=<NEW_ORDER_CODE>,ORDER_DESC=<NEW_ORDER_DESC>, &
							UNIT_CODE=<NEW_UNIT_CODE>,UNIT_PRICE=<NEW_UNIT_PRICE>, &
							VERSION_NUMBER=<VERSION_NUMBER>,UN_NUM_FLG=<UN_NUM_FLG>,  &
							OPT_DATE=SYSDATE,OPT_USER=<OPT_USER>,OPT_TERM=<OPT_TERM>,ORDERSET_CODE=<NEW_ORDER_CODE> &
						    WHERE PACKAGE_CODE = <PACKAGE_CODE> AND SECTION_CODE = <SECTION_CODE>  &
						    AND ORDER_CODE = <ORDER_CODE> AND USED_FLG = '0' 
updateMemPatPackageSectionD.Debug=N


//套餐项目变更时，删除已经卖给病人的没有使用的旧集合医嘱的细项
delMemPatPackageSectionD.Type = TSQL  
delMemPatPackageSectionD.SQL =DELETE FROM MEM_PAT_PACKAGE_SECTION_D &
								WHERE PACKAGE_CODE = <PACKAGE_CODE> &
								AND SECTION_CODE = <SECTION_CODE> &
								AND  ORDERSET_CODE = <ORDERSET_CODE>  &
								AND TRADE_NO = <TRADE_NO> &
								AND HIDE_FLG='Y' AND USED_FLG = '0'
delMemPatPackageSectionD.Debug=N


//套餐项目变更时，对已购买的时程添加新医嘱的细项
insertMemPatPackageSectionD.Type = TSQL 
insertMemPatPackageSectionD.SQL =INSERT INTO MEM_PAT_PACKAGE_SECTION_D &
								(ID,TRADE_NO,PACKAGE_CODE,SECTION_CODE,PACKAGE_DESC, &
								SECTION_DESC,CASE_NO,MR_NO,SEQ,ORDER_CODE, &
								ORDER_DESC,ORDER_NUM,UNIT_CODE,UNIT_PRICE,RETAIL_PRICE, &
								DESCRIPTION,OPT_DATE,OPT_USER,OPT_TERM,SETMAIN_FLG, &
								ORDERSET_CODE,ORDERSET_GROUP_NO,HIDE_FLG,TRADE_ENG_DESC,PACKAGE_ENG_DESC, &								
								USED_FLG,REST_TRADE_NO,ORDERSET_ID,VERSION_NUMBER,UN_NUM_FLG &
								) VALUES( &
								<ID>,<TRADE_NO>,<PACKAGE_CODE>,<SECTION_CODE>,<PACKAGE_DESC>, &
								<SECTION_DESC>,<CASE_NO>,<MR_NO>,<SEQ>,<ORDER_CODE>, &
								<ORDER_DESC>,<ORDER_NUM>,<UNIT_CODE>,<UNIT_PRICE>,<RETAIL_PRICE>, &
								<DESCRIPTION>,SYSDATE,<OPT_USER>,<OPT_TERM>,<SETMAIN_FLG>, &
								<ORDERSET_CODE>,<ORDERSET_GROUP_NO>,<HIDE_FLG>,<TRADE_ENG_DESC>,<PACKAGE_ENG_DESC>, &
								<USED_FLG>,<REST_TRADE_NO>,<ORDERSET_ID>,<VERSION_NUMBER>,<UN_NUM_FLG>)
								
insertMemPatPackageSectionD.Debug=N

//更新MEM_PACKAGE_SECTION_D表中的的原价UNIT_PRICE
updateMemPackageSectionDUnitPrice.Type = TSQL 
updateMemPackageSectionDUnitPrice.SQL = UPDATE MEM_PACKAGE_SECTION_D  &
										SET UNIT_PRICE=UNIT_PRICE+<DIFF_PRICE>,  &
										VERSION_NUMBER=<VERSION_NUMBER>,  &
										OPT_DATE=SYSDATE,OPT_USER=<OPT_USER>,OPT_TERM=<OPT_TERM> &
										WHERE PACKAGE_CODE = <PACKAGE_CODE> AND SECTION_CODE = <SECTION_CODE>  &
						    			AND ORDER_CODE = <ORDER_CODE> AND ID=<ID>
										
updateMemPackageSectionDUnitPrice.Debug=N


//更新MEM_PACKAGE_SECTION_D_PRICE表中的原价
updateMemPackageSectionDPriceOriginal.Type = TSQL  	
updateMemPackageSectionDPriceOriginal.SQL = UPDATE MEM_PACKAGE_SECTION_D_PRICE  &
									SET ORIGINAL_PRICE=ORIGINAL_PRICE+<DIFF_PRICE_SUM>,  &
									VERSION_NUMBER=<VERSION_NUMBER>,  &
									OPT_DATE=SYSDATE,OPT_USER=<OPT_USER>,OPT_TERM=<OPT_TERM> &
									WHERE ID=<ID> AND SECTION_CODE=<SECTION_CODE> AND PACKAGE_CODE=<PACKAGE_CODE>

updateMemPackageSectionDPriceOriginal.Debug=N

//将新医嘱价钱更新到时程的总价里MEM_PACKAGE_SECTION_PRICE
updateMemPackageSectionPriceOriginal.Type = TSQL  	
updateMemPackageSectionPriceOriginal.SQL = UPDATE MEM_PACKAGE_SECTION_PRICE  &
								   SET ORIGINAL_PRICE = <ORIGINAL_PRICE>,  &
								     VERSION_NUMBER=<VERSION_NUMBER>,  &
								     OPT_DATE=SYSDATE,OPT_USER=<OPT_USER>,OPT_TERM=<OPT_TERM> &
								   WHERE PACKAGE_CODE =  <PACKAGE_CODE> AND SECTION_CODE = <SECTION_CODE>  
updateMemPackageSectionPriceOriginal.Debug=N

//更新套餐中的比列MEM_PACKAGE_PRICE
updateMemPackagePrice.Type = TSQL  	
updateMemPackagePrice.SQL = UPDATE MEM_PACKAGE_PRICE  &
								   SET DISCOUNT_RATE= ROUND (PACKAGE_PRICE / <SUM_PRICE>, 2),  &
								     VERSION_NUMBER=<VERSION_NUMBER>,  &
								     OPT_DATE=SYSDATE,OPT_USER=<OPT_USER>,OPT_TERM=<OPT_TERM> &
								   WHERE PACKAGE_CODE =  <PACKAGE_CODE>   
updateMemPackagePrice.Debug=N

//住院套餐通过就诊号查询套餐字典数据
selectMemPackageSectionDByCaseNo.Type = TSQL  	
selectMemPackageSectionDByCaseNo.SQL = SELECT A.TRADE_NO, A.PACKAGE_CODE,A.SECTION_CODE, A.PACKAGE_DESC, A.SECTION_DESC, &
						A.CASE_NO, A.MR_NO, A.SEQ, A.ORDER_CODE, A.ORDER_DESC, A.ORDER_NUM, &
						A.UNIT_CODE, A.UNIT_PRICE, A.RETAIL_PRICE, A.DESCRIPTION, A.USED_FLG,&
						A.SETMAIN_FLG,A.ORDERSET_CODE, A.HIDE_FLG, A.ORDERSET_GROUP_NO,& 
						A.REST_TRADE_NO, A.TRADE_ENG_DESC, A.PACKAGE_ENG_DESC, A.ORDERSET_ID, A.VERSION_NUMBER, &
						A.UN_NUM_FLG,B.ORDER_CODE AS ORDER_FEE_CODE,B.CAT1_TYPE,&
						B.ACTIVE_FLG,A.UNIT_PRICE AS OWN_PRICE,B.CHARGE_HOSP_CODE,B.OWN_PRICE AS OWN_PRICE_FEE &
						FROM MEM_PAT_PACKAGE_SECTION_D A,SYS_FEE B WHERE A.ORDER_CODE=B.ORDER_CODE(+) AND A.SETMAIN_FLG='N'
selectMemPackageSectionDByCaseNo.item=CASE_NO;PACKAGE_CODE;SECTION_CODE;TRADE_NO;ORDER_CODE
selectMemPackageSectionDByCaseNo.CASE_NO=A.CASE_NO=<CASE_NO> 
selectMemPackageSectionDByCaseNo.TRADE_NO=A.TRADE_NO=<TRADE_NO> 
selectMemPackageSectionDByCaseNo.PACKAGE_CODE=A.PACKAGE_CODE=<PACKAGE_CODE>
selectMemPackageSectionDByCaseNo.SECTION_CODE=A.SECTION_CODE=<SECTION_CODE>	
selectMemPackageSectionDByCaseNo.ORDER_CODE=A.ORDER_CODE=<ORDER_CODE>
selectMemPackageSectionDByCaseNo.Debug=N

